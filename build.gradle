plugins {
    id 'java'
    id 'io.quarkus'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-hibernate-orm-panache'
    implementation 'io.quarkus:quarkus-hibernate-validator'
    implementation 'io.quarkus:quarkus-undertow'
    implementation 'io.quarkus:quarkus-resteasy-jackson'
    implementation 'io.quarkus:quarkus-jdbc-postgresql'
    implementation 'io.quarkus:quarkus-smallrye-openapi'
    implementation 'io.quarkus:quarkus-config-yaml'
    // implementation 'io.quarkus:quarkus-liquibase'

    // implementation 'io.quarkus:quarkus-arc'
    // implementation 'io.quarkus:quarkus-resteasy'
    // implementation 'io.quarkus:quarkus-rest-client'
    // implementation 'io.quarkus:quarkus-rest-client-reactive-jackson'
    // implementation 'io.quarkus:quarkus-jaxrs-client-reactive'
    // implementation 'io.quarkus:quarkus-rest-client-jackson'

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    compileOnly "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'

    testImplementation "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation "org.mapstruct:mapstruct:${mapstructVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
}

group 'br.com.fourmart'
version '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

test {

    // Test Logging
    testLogging {
        exceptionFormat = "full"
        showExceptions = true
        showCauses = true
        showStackTraces = true
        events = ["standardError", "passed", "skipped", "failed"]
    }

    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}

tasks.withType(Test) {
    testLogging.events = ["standardError", "passed", "skipped", "failed"]
    testLogging.exceptionFormat("full")
    testLogging.showExceptions = true
    testLogging.showCauses = true
    testLogging.showStackTraces = true
}
